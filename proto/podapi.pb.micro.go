// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/podapi.proto

package podapi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PodApiService service

func NewPodApiServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PodApiService service

type PodApiService interface {
	GetPodById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddPod(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdatePod(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeletePodById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	// 默认接口
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type podApiService struct {
	c    client.Client
	name string
}

func NewPodApiService(name string, c client.Client) PodApiService {
	return &podApiService{
		c:    c,
		name: name,
	}
}

func (c *podApiService) GetPodById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PodApiService.GetPodById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podApiService) AddPod(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PodApiService.AddPod", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podApiService) UpdatePod(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PodApiService.UpdatePod", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podApiService) DeletePodById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PodApiService.DeletePodById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podApiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PodApiService.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PodApiService service

type PodApiServiceHandler interface {
	GetPodById(context.Context, *Request, *Response) error
	AddPod(context.Context, *Request, *Response) error
	UpdatePod(context.Context, *Request, *Response) error
	DeletePodById(context.Context, *Request, *Response) error
	// 默认接口
	Call(context.Context, *Request, *Response) error
}

func RegisterPodApiServiceHandler(s server.Server, hdlr PodApiServiceHandler, opts ...server.HandlerOption) error {
	type podApiService interface {
		GetPodById(ctx context.Context, in *Request, out *Response) error
		AddPod(ctx context.Context, in *Request, out *Response) error
		UpdatePod(ctx context.Context, in *Request, out *Response) error
		DeletePodById(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type PodApiService struct {
		podApiService
	}
	h := &podApiServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PodApiService{h}, opts...))
}

type podApiServiceHandler struct {
	PodApiServiceHandler
}

func (h *podApiServiceHandler) GetPodById(ctx context.Context, in *Request, out *Response) error {
	return h.PodApiServiceHandler.GetPodById(ctx, in, out)
}

func (h *podApiServiceHandler) AddPod(ctx context.Context, in *Request, out *Response) error {
	return h.PodApiServiceHandler.AddPod(ctx, in, out)
}

func (h *podApiServiceHandler) UpdatePod(ctx context.Context, in *Request, out *Response) error {
	return h.PodApiServiceHandler.UpdatePod(ctx, in, out)
}

func (h *podApiServiceHandler) DeletePodById(ctx context.Context, in *Request, out *Response) error {
	return h.PodApiServiceHandler.DeletePodById(ctx, in, out)
}

func (h *podApiServiceHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.PodApiServiceHandler.Call(ctx, in, out)
}
